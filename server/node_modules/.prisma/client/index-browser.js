
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  folderNo: 'folderNo',
  refNo: 'refNo',
  paxName: 'paxName',
  agentName: 'agentName',
  teamName: 'teamName',
  pnr: 'pnr',
  airline: 'airline',
  fromTo: 'fromTo',
  bookingType: 'bookingType',
  bookingStatus: 'bookingStatus',
  pcDate: 'pcDate',
  issuedDate: 'issuedDate',
  paymentMethod: 'paymentMethod',
  lastPaymentDate: 'lastPaymentDate',
  travelDate: 'travelDate',
  revenue: 'revenue',
  prodCost: 'prodCost',
  transFee: 'transFee',
  surcharge: 'surcharge',
  received: 'received',
  transactionMethod: 'transactionMethod',
  receivedDate: 'receivedDate',
  balance: 'balance',
  profit: 'profit',
  invoiced: 'invoiced',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  numPax: 'numPax',
  initialDeposit: 'initialDeposit',
  originalBookingId: 'originalBookingId'
};

exports.Prisma.PendingBookingScalarFieldEnum = {
  id: 'id',
  refNo: 'refNo',
  paxName: 'paxName',
  agentName: 'agentName',
  teamName: 'teamName',
  pnr: 'pnr',
  airline: 'airline',
  fromTo: 'fromTo',
  bookingType: 'bookingType',
  bookingStatus: 'bookingStatus',
  pcDate: 'pcDate',
  issuedDate: 'issuedDate',
  paymentMethod: 'paymentMethod',
  lastPaymentDate: 'lastPaymentDate',
  travelDate: 'travelDate',
  revenue: 'revenue',
  prodCost: 'prodCost',
  transFee: 'transFee',
  surcharge: 'surcharge',
  received: 'received',
  transactionMethod: 'transactionMethod',
  receivedDate: 'receivedDate',
  balance: 'balance',
  profit: 'profit',
  invoiced: 'invoiced',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  numPax: 'numPax'
};

exports.Prisma.InstalmentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  dueDate: 'dueDate',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PendingInstalmentScalarFieldEnum = {
  id: 'id',
  pendingBookingId: 'pendingBookingId',
  dueDate: 'dueDate',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstalmentPaymentScalarFieldEnum = {
  id: 'id',
  instalmentId: 'instalmentId',
  amount: 'amount',
  transactionMethod: 'transactionMethod',
  paymentDate: 'paymentDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  title: 'title',
  firstName: 'firstName',
  lastName: 'lastName',
  contactNo: 'contactNo',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.CostItemScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  category: 'category',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PendingCostItemScalarFieldEnum = {
  id: 'id',
  pendingBookingId: 'pendingBookingId',
  category: 'category',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PassengerScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  title: 'title',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  gender: 'gender',
  email: 'email',
  contactNo: 'contactNo',
  nationality: 'nationality',
  birthday: 'birthday',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PendingPassengerScalarFieldEnum = {
  id: 'id',
  pendingBookingId: 'pendingBookingId',
  title: 'title',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  gender: 'gender',
  email: 'email',
  contactNo: 'contactNo',
  nationality: 'nationality',
  birthday: 'birthday',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CostItemSupplierScalarFieldEnum = {
  id: 'id',
  costItemId: 'costItemId',
  pendingCostItemId: 'pendingCostItemId',
  supplier: 'supplier',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paidAmount: 'paidAmount',
  pendingAmount: 'pendingAmount',
  transactionMethod: 'transactionMethod',
  firstMethodAmount: 'firstMethodAmount',
  secondMethodAmount: 'secondMethodAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierPaymentSettlementScalarFieldEnum = {
  id: 'id',
  costItemSupplierId: 'costItemSupplierId',
  amount: 'amount',
  transactionMethod: 'transactionMethod',
  settlementDate: 'settlementDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CancellationScalarFieldEnum = {
  id: 'id',
  originalBookingId: 'originalBookingId',
  folderNo: 'folderNo',
  refundTransactionMethod: 'refundTransactionMethod',
  originalRevenue: 'originalRevenue',
  originalProdCost: 'originalProdCost',
  supplierCancellationFee: 'supplierCancellationFee',
  refundToPassenger: 'refundToPassenger',
  adminFee: 'adminFee',
  creditNoteAmount: 'creditNoteAmount',
  profitOrLoss: 'profitOrLoss',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierCreditNoteScalarFieldEnum = {
  id: 'id',
  supplier: 'supplier',
  initialAmount: 'initialAmount',
  remainingAmount: 'remainingAmount',
  status: 'status',
  generatedFromCancellationId: 'generatedFromCancellationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditNoteUsageScalarFieldEnum = {
  id: 'id',
  amountUsed: 'amountUsed',
  usedAt: 'usedAt',
  creditNoteId: 'creditNoteId',
  usedOnCostItemSupplierId: 'usedOnCostItemSupplierId'
};

exports.Prisma.SupplierPayableScalarFieldEnum = {
  id: 'id',
  supplier: 'supplier',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  pendingAmount: 'pendingAmount',
  reason: 'reason',
  status: 'status',
  createdFromCancellationId: 'createdFromCancellationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierPayableSettlementScalarFieldEnum = {
  id: 'id',
  supplierPayableId: 'supplierPayableId',
  amount: 'amount',
  transactionMethod: 'transactionMethod',
  settlementDate: 'settlementDate',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerPayableScalarFieldEnum = {
  id: 'id',
  totalAmount: 'totalAmount',
  paidAmount: 'paidAmount',
  pendingAmount: 'pendingAmount',
  reason: 'reason',
  status: 'status',
  createdFromCancellationId: 'createdFromCancellationId',
  bookingId: 'bookingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerPayableSettlementScalarFieldEnum = {
  id: 'id',
  customerPayableId: 'customerPayableId',
  amount: 'amount',
  transactionMethod: 'transactionMethod',
  paymentDate: 'paymentDate',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Teams = exports.$Enums.Teams = {
  PH: 'PH',
  TOURS: 'TOURS'
};

exports.BookingType = exports.$Enums.BookingType = {
  FRESH: 'FRESH',
  DATE_CHANGE: 'DATE_CHANGE',
  CANCELLATION: 'CANCELLATION'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  FULL: 'FULL',
  INTERNAL: 'INTERNAL',
  REFUND: 'REFUND',
  HUMM: 'HUMM',
  FULL_HUMM: 'FULL_HUMM',
  INTERNAL_HUMM: 'INTERNAL_HUMM'
};

exports.PendingStatus = exports.$Enums.PendingStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  AGENT: 'AGENT'
};

exports.Title = exports.$Enums.Title = {
  MR: 'MR',
  MRS: 'MRS',
  MS: 'MS',
  MASTER: 'MASTER'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.PassengerCategory = exports.$Enums.PassengerCategory = {
  ADULT: 'ADULT',
  CHILD: 'CHILD',
  INFANT: 'INFANT'
};

exports.Suppliers = exports.$Enums.Suppliers = {
  BTRES: 'BTRES',
  LYCA: 'LYCA',
  CEBU: 'CEBU',
  BTRES_LYCA: 'BTRES_LYCA',
  BA: 'BA',
  TRAINLINE: 'TRAINLINE',
  EASYJET: 'EASYJET',
  FLYDUBAI: 'FLYDUBAI'
};

exports.CreditNoteStatus = exports.$Enums.CreditNoteStatus = {
  AVAILABLE: 'AVAILABLE',
  PARTIALLY_USED: 'PARTIALLY_USED',
  USED: 'USED'
};

exports.Prisma.ModelName = {
  Booking: 'Booking',
  PendingBooking: 'PendingBooking',
  Instalment: 'Instalment',
  PendingInstalment: 'PendingInstalment',
  InstalmentPayment: 'InstalmentPayment',
  User: 'User',
  CostItem: 'CostItem',
  PendingCostItem: 'PendingCostItem',
  Passenger: 'Passenger',
  PendingPassenger: 'PendingPassenger',
  CostItemSupplier: 'CostItemSupplier',
  SupplierPaymentSettlement: 'SupplierPaymentSettlement',
  Cancellation: 'Cancellation',
  SupplierCreditNote: 'SupplierCreditNote',
  CreditNoteUsage: 'CreditNoteUsage',
  SupplierPayable: 'SupplierPayable',
  SupplierPayableSettlement: 'SupplierPayableSettlement',
  CustomerPayable: 'CustomerPayable',
  CustomerPayableSettlement: 'CustomerPayableSettlement'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
