generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url = env("DB_url")
}

model Booking {
  id                Int             @id @default(autoincrement())
  refNo             String          @map("ref_no") 
  paxName           String          @map("pax_name")
  agentName         String          @map("agent_name")  
  teamName          Teams?          @map("team_name")  
  pnr               String          @map("pnr") 
  airline           String          @map("airline")
  fromTo            String          @map("from_to")
  bookingType       BookingType     @map("booking_type")
  bookingStatus     BookingStatus?  @map("booking_status")
  pcDate            DateTime        @map("pc_date")
  issuedDate        DateTime?       @map("issued_date")
  paymentMethod     PaymentMethod   @map("payment_method")
  lastPaymentDate   DateTime?       @map("last_payment_date")
  travelDate        DateTime?       @map("travel_date")
  supplier          Suppliers?      @map("supplier")
  revenue           Float?          @map("revenue")
  prodCost          Float?          @map("prod_cost")
  transFee          Float?          @map("trans_fee")
  surcharge         Float?          @map("surcharge")
  received          Float?          @map("received")
  balance           Float?          @map("balance")
  profit            Float?          @map("profit")
  invoiced          String?         @map("invoice")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  costItems         CostItem[] 
  instalments       Instalment[]    
  passengers        Passenger[]
  @@map("bookings")
}

model PendingBooking {
  id                Int             @id @default(autoincrement())
  refNo             String          @map("ref_no") 
  paxName           String          @map("pax_name")
  agentName         String          @map("agent_name")  
  teamName          Teams?          @map("team_name")  
  pnr               String          @map("pnr") 
  airline           String          @map("airline")
  fromTo            String          @map("from_to")
  bookingType       BookingType     @map("booking_type")
  bookingStatus     BookingStatus?  @map("booking_status")
  pcDate            DateTime        @map("pc_date")
  issuedDate        DateTime?       @map("issued_date")
  paymentMethod     PaymentMethod   @map("payment_method")
  lastPaymentDate   DateTime?       @map("last_payment_date")
  travelDate        DateTime?       @map("travel_date")
  supplier          Suppliers?      @map("supplier")
  revenue           Float?          @map("revenue")
  prodCost          Float?          @map("prod_cost")
  transFee          Float?          @map("trans_fee")
  surcharge         Float?          @map("surcharge")
  received          Float?          @map("received")
  balance           Float?          @map("balance")
  profit            Float?          @map("profit")
  invoiced          String?         @map("invoice")
  status            PendingStatus   @default(PENDING) @map("status")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  costItems         PendingCostItem[]
  instalments       PendingInstalment[]
  passengers        PendingPassenger[]
  @@map("pending_bookings")
}

model Instalment {
  id            Int       @id @default(autoincrement())
  bookingId     Int
  dueDate       DateTime  @map("due_date")
  amount        Float
  status        String    @default("PENDING")
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  @@map("instalments")
}

model PendingInstalment {
  id                Int            @id @default(autoincrement())
  pendingBookingId  Int
  dueDate           DateTime       @map("due_date")
  amount            Float
  status            String         @default("PENDING")
  pendingBooking    PendingBooking @relation(fields: [pendingBookingId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  @@map("pending_instalments")
}

enum InstalmentStatus {
  PENDING
  PAID
  OVERDUE
}

model User {
  id          Int       @id @default(autoincrement())
  email       String?   @unique
  title       String?   @db.VarChar(10)
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  contactNo   String?   @map("contact_no")
  role        Role
  createdAt   DateTime  @default(now()) @map("created_at")
  @@map("users")
}

model CostItem {
  id            Int            @id @default(autoincrement())
  bookingId     Int
  category      String
  amount        Float
  booking       Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  suppliers     CostItemSupplier[] // Link to supplier allocations
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  @@map("cost_items")
}

model PendingCostItem {
  id                Int            @id @default(autoincrement())
  pendingBookingId  Int
  category          String
  amount            Float
  pendingBooking    PendingBooking @relation(fields: [pendingBookingId], references: [id], onDelete: Cascade)
  suppliers         CostItemSupplier[] // Link to supplier allocations
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  @@map("pending_cost_items")
}

enum Teams {
  PH
  TOURS
}

enum Suppliers {
  BTRES
  LYCA
  CEBU
  BTRES_LYCA
  BA
  TRAINLINE
  EASYJET
  FLYDUBAI
}

enum Role {
  ADMIN
  MANAGER
  AGENT
}

enum BookingType {
  FRESH
  DATE_CHANGE
  CANCELLATION
}

enum PaxType {
  FRESH
  REFERRAL
  REPEAT
}

enum PaymentMethod {
  FULL
  INTERNAL
  REFUND
  HUMM
  FULL_HUMM
  INTERNAL_HUMM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
}

enum PendingStatus {
  PENDING
  APPROVED
  REJECTED
}

//pax information
enum Title {
  MR
  MRS
  MS
  MASTER
}
enum Gender {
  MALE
  FEMALE
  OTHER
}
enum PassengerCategory {
  ADULT
  CHILD
  INFANT
}

model Passenger {
  id            Int               @id @default(autoincrement())
  bookingId     Int
  title         Title
  firstName     String            @map("first_name")
  middleName    String?           @map("middle_name")
  lastName      String            @map("last_name")
  gender        Gender
  email         String?
  contactNo     String?           @map("contact_no")
  country       String?
  category      PassengerCategory
  booking       Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  @@map("passengers")
}


model PendingPassenger {
  id                Int               @id @default(autoincrement())
  pendingBookingId  Int
  title             Title
  firstName         String            @map("first_name")
  middleName        String?           @map("middle_name")
  lastName          String            @map("last_name")
  gender            Gender
  email             String?
  contactNo         String?           @map("contact_no")
  country           String?
  category          PassengerCategory
  pendingBooking    PendingBooking     @relation(fields: [pendingBookingId], references: [id], onDelete: Cascade)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  @@map("pending_passengers")
}


model CostItemSupplier {
  id                Int              @id @default(autoincrement())
  costItemId        Int?
  pendingCostItemId Int?
  supplier          Suppliers
  amount            Float
  paymentMethod     String           @default("full") // "credit", "full", "custom"
  paidAmount        Float            @default(0.0)    // Amount paid to supplier
  pendingAmount     Float            @default(0.0)    // Amount to be paid
  costItem          CostItem?        @relation(fields: [costItemId], references: [id], onDelete: Cascade)
  pendingCostItem   PendingCostItem? @relation(fields: [pendingCostItemId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  @@map("cost_item_suppliers")
}